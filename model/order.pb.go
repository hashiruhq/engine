// Code generated by protoc-gen-go. DO NOT EDIT.
// source: order.proto

package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MarketSide int32

const (
	// BUY value means the user wants to buy from the market
	MarketSide_Buy MarketSide = 0
	// SELL value means the user wants to sell to the market
	MarketSide_Sell MarketSide = 1
)

var MarketSide_name = map[int32]string{
	0: "Buy",
	1: "Sell",
}
var MarketSide_value = map[string]int32{
	"Buy":  0,
	"Sell": 1,
}

func (x MarketSide) String() string {
	return proto.EnumName(MarketSide_name, int32(x))
}
func (MarketSide) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_order_5b14306a715444e2, []int{0}
}

type OrderType int32

const (
	// LimitOrder allows the trader to start an order where the transaction will be completed
	// if the market price is at or better than the set price
	OrderType_Limit OrderType = 0
	// MarketOrder completes the trade at the current market price
	OrderType_Market OrderType = 1
)

var OrderType_name = map[int32]string{
	0: "Limit",
	1: "Market",
}
var OrderType_value = map[string]int32{
	"Limit":  0,
	"Market": 1,
}

func (x OrderType) String() string {
	return proto.EnumName(OrderType_name, int32(x))
}
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_order_5b14306a715444e2, []int{1}
}

type OrderStatus int32

const (
	// StatusPending is used when the order has not yet been processed by the matching engine
	OrderStatus_Pending OrderStatus = 0
	// StatusUntouched means that the order was processed by the engine but it did not yet match with any order
	OrderStatus_Untouched OrderStatus = 1
	// StatusPartiallyFilled is used when the order was not completely filled
	OrderStatus_PartiallyFilled OrderStatus = 2
	// StatusCancelled is used when the order has been cancelled
	OrderStatus_Cancelled OrderStatus = 3
	// StatusFilled is used when the order was filled and th
	OrderStatus_Filled OrderStatus = 4
)

var OrderStatus_name = map[int32]string{
	0: "Pending",
	1: "Untouched",
	2: "PartiallyFilled",
	3: "Cancelled",
	4: "Filled",
}
var OrderStatus_value = map[string]int32{
	"Pending":         0,
	"Untouched":       1,
	"PartiallyFilled": 2,
	"Cancelled":       3,
	"Filled":          4,
}

func (x OrderStatus) String() string {
	return proto.EnumName(OrderStatus_name, int32(x))
}
func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_order_5b14306a715444e2, []int{2}
}

type StopLoss int32

const (
	// By default an order has its stop loss flag set to disabled
	StopLoss_None StopLoss = 0
	// Stop loss triggers when the last trade price changes to a value at or below the `StopPrice`
	StopLoss_Loss StopLoss = 1
	// Stop entry triggers when the last trade price changes to a value at or above the `StopPrice`
	StopLoss_Entry StopLoss = 2
)

var StopLoss_name = map[int32]string{
	0: "None",
	1: "Loss",
	2: "Entry",
}
var StopLoss_value = map[string]int32{
	"None":  0,
	"Loss":  1,
	"Entry": 2,
}

func (x StopLoss) String() string {
	return proto.EnumName(StopLoss_name, int32(x))
}
func (StopLoss) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_order_5b14306a715444e2, []int{3}
}

type CommandType int32

const (
	// A new order should be added in the order book
	CommandType_NewOrder CommandType = 0
	// An existing order should be cancelled if it's not already filled
	CommandType_CancelOrder CommandType = 1
	// The whole market should be archived and stored in a safe location
	// This command may not be needed since the engine should already create regular backups of the current orderbook
	CommandType_BackupMarket CommandType = 2
)

var CommandType_name = map[int32]string{
	0: "NewOrder",
	1: "CancelOrder",
	2: "BackupMarket",
}
var CommandType_value = map[string]int32{
	"NewOrder":     0,
	"CancelOrder":  1,
	"BackupMarket": 2,
}

func (x CommandType) String() string {
	return proto.EnumName(CommandType_name, int32(x))
}
func (CommandType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_order_5b14306a715444e2, []int{4}
}

// Order allows the trader to start an order where the transaction will be completed
// if the market price is at or better than the set price
type Order struct {
	// The event type signals what operation can be executed on the market engine
	// 0 = New Order
	// 1 = Cancel Order
	// 2 = Backup Market
	EventType CommandType `protobuf:"varint,1,opt,name=EventType,proto3,enum=model.CommandType" json:"EventType,omitempty"`
	// The type of the order: 0=limit 1=market
	Type OrderType `protobuf:"varint,2,opt,name=Type,proto3,enum=model.OrderType" json:"Type,omitempty"`
	// Category int8 // deprecated by the Type field
	// The side of the market: 0=buy 1=sell
	Side MarketSide `protobuf:"varint,3,opt,name=Side,proto3,enum=model.MarketSide" json:"Side,omitempty"`
	// Optional:
	// Amount of coins to buy/sell with the order
	// - The amount must be greater than the base_min_amount for the product and no larger than the base_max_amount.
	Amount uint64 `protobuf:"varint,4,opt,name=Amount,proto3" json:"Amount,omitempty"`
	// Optional:
	// The price to pay for one unit in the market
	// - The price must be specified in quote_increment product units.
	// - The quote increment is the smallest unit of price. For the BTC-USD product,
	//   the quote increment is 0.01 or 1 penny. Prices less than 1 penny will not be accepted,
	//   and no fractional penny prices will be accepted. Not required for market orders.
	Price uint64 `protobuf:"varint,5,opt,name=Price,proto3" json:"Price,omitempty"`
	// Stop flag. Requires `StopPrice`` to be defined.
	// Stop orders become active and wait to trigger based on the movement of the last trade price.
	// There are 2 types of stop orders: 0=none 1=loss 2=entry
	// - Stop loss triggers when the last trade price changes to a value at or below the `StopPrice`.
	// - Stop entry triggers when the last trade price changes to a value at or above the `StopPrice`.
	// - Note that when triggered, stop orders execute as either market or limit orders, depending on the type.
	Stop StopLoss `protobuf:"varint,6,opt,name=Stop,proto3,enum=model.StopLoss" json:"Stop,omitempty"`
	// Sets trigger price for stop order. Only if stop is defined.
	StopPrice uint64 `protobuf:"varint,7,opt,name=StopPrice,proto3" json:"StopPrice,omitempty"`
	// Maximum total funds to use for the order
	// - The funds field is optionally used for market orders. When specified it indicates how much of the product
	//   quote currency to buy or sell. For example, a market buy for BTC-USD with funds specified as 150.00 will
	//   spend 150 USD to buy BTC (including any fees). If the funds field is not specified for a market buy order,
	//   size must be specified and the enting will use available funds in your account to buy bitcoin.
	// - A market sell order can also specify the funds. If funds is specified, it will limit the sell to the amount
	//   of funds specified. You can use funds with sell orders to limit the amount of quote currency funds received.
	Funds uint64 `protobuf:"varint,8,opt,name=Funds,proto3" json:"Funds,omitempty"`
	// ******************************************
	// Common fields
	// ******************************************
	// The id of the order
	ID uint64 `protobuf:"varint,9,opt,name=ID,proto3" json:"ID,omitempty"`
	// The market for which this order is for. Ex: eth-btc
	Market string `protobuf:"bytes,10,opt,name=Market,proto3" json:"Market,omitempty"`
	// The status is dictated by the stage in the execution of the order by the matching engine
	// 0 = Pending
	// 1 = Untouched
	// 2 = Partially Filled
	// 3 = Cancelled
	// 4 = Filled
	Status OrderStatus `protobuf:"varint,11,opt,name=Status,proto3,enum=model.OrderStatus" json:"Status,omitempty"`
	// The unique identifier the account that added the order
	OwnerID              uint64   `protobuf:"varint,12,opt,name=OwnerID,proto3" json:"OwnerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_order_5b14306a715444e2, []int{0}
}
func (m *Order) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Order.Unmarshal(m, b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Order.Marshal(b, m, deterministic)
}
func (dst *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(dst, src)
}
func (m *Order) XXX_Size() int {
	return xxx_messageInfo_Order.Size(m)
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetEventType() CommandType {
	if m != nil {
		return m.EventType
	}
	return CommandType_NewOrder
}

func (m *Order) GetType() OrderType {
	if m != nil {
		return m.Type
	}
	return OrderType_Limit
}

func (m *Order) GetSide() MarketSide {
	if m != nil {
		return m.Side
	}
	return MarketSide_Buy
}

func (m *Order) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Order) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Order) GetStop() StopLoss {
	if m != nil {
		return m.Stop
	}
	return StopLoss_None
}

func (m *Order) GetStopPrice() uint64 {
	if m != nil {
		return m.StopPrice
	}
	return 0
}

func (m *Order) GetFunds() uint64 {
	if m != nil {
		return m.Funds
	}
	return 0
}

func (m *Order) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Order) GetMarket() string {
	if m != nil {
		return m.Market
	}
	return ""
}

func (m *Order) GetStatus() OrderStatus {
	if m != nil {
		return m.Status
	}
	return OrderStatus_Pending
}

func (m *Order) GetOwnerID() uint64 {
	if m != nil {
		return m.OwnerID
	}
	return 0
}

func init() {
	proto.RegisterType((*Order)(nil), "model.Order")
	proto.RegisterEnum("model.MarketSide", MarketSide_name, MarketSide_value)
	proto.RegisterEnum("model.OrderType", OrderType_name, OrderType_value)
	proto.RegisterEnum("model.OrderStatus", OrderStatus_name, OrderStatus_value)
	proto.RegisterEnum("model.StopLoss", StopLoss_name, StopLoss_value)
	proto.RegisterEnum("model.CommandType", CommandType_name, CommandType_value)
}

func init() { proto.RegisterFile("order.proto", fileDescriptor_order_5b14306a715444e2) }

var fileDescriptor_order_5b14306a715444e2 = []byte{
	// 423 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x52, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0xae, 0xd3, 0xa4, 0x6d, 0x5e, 0xca, 0x6a, 0x1e, 0x08, 0xf9, 0x80, 0x44, 0x35, 0x40, 0x2a,
	0x39, 0x54, 0x08, 0xee, 0x48, 0x6c, 0xdd, 0xa4, 0x4a, 0x63, 0xab, 0x52, 0x38, 0x70, 0x0c, 0x8d,
	0x05, 0xd1, 0x12, 0xbb, 0x72, 0x1d, 0xa6, 0xfc, 0xed, 0x5c, 0x90, 0x9f, 0x5d, 0x3a, 0x4e, 0xd6,
	0xf7, 0xc3, 0x9f, 0x3f, 0x3f, 0x3d, 0xc8, 0xb4, 0xa9, 0xa4, 0x59, 0xee, 0x8d, 0xb6, 0x1a, 0x93,
	0x56, 0x57, 0xb2, 0x39, 0xff, 0x13, 0x41, 0x72, 0xe7, 0x68, 0x7c, 0x0f, 0xe9, 0xd5, 0x6f, 0xa9,
	0xec, 0xd7, 0x7e, 0x2f, 0x05, 0x9b, 0xb3, 0xc5, 0xd9, 0x07, 0x5c, 0x92, 0x69, 0x79, 0xa9, 0xdb,
	0xb6, 0x54, 0x95, 0x53, 0x8a, 0x93, 0x09, 0xdf, 0x40, 0x4c, 0xe6, 0x88, 0xcc, 0x3c, 0x98, 0x29,
	0x8d, 0xac, 0xa4, 0xe2, 0x5b, 0x88, 0xb7, 0x75, 0x25, 0xc5, 0x90, 0x5c, 0x4f, 0x83, 0xeb, 0x4b,
	0x69, 0xee, 0xa5, 0x75, 0x42, 0x41, 0x32, 0xbe, 0x80, 0xd1, 0xe7, 0x56, 0x77, 0xca, 0x8a, 0x78,
	0xce, 0x16, 0x71, 0x11, 0x10, 0x3e, 0x87, 0x64, 0x63, 0xea, 0x9d, 0x14, 0x09, 0xd1, 0x1e, 0xe0,
	0x6b, 0x88, 0xb7, 0x56, 0xef, 0xc5, 0x88, 0x42, 0x67, 0x21, 0xd4, 0x51, 0x37, 0xfa, 0x70, 0x28,
	0x48, 0xc4, 0x97, 0x90, 0xba, 0xd3, 0x5f, 0x1f, 0xd3, 0xf5, 0x13, 0xe1, 0x82, 0xaf, 0x3b, 0x55,
	0x1d, 0xc4, 0xc4, 0x07, 0x13, 0xc0, 0x33, 0x88, 0xd6, 0x2b, 0x91, 0x12, 0x15, 0xad, 0x57, 0xae,
	0x96, 0xaf, 0x2a, 0x60, 0xce, 0x16, 0x69, 0x11, 0x10, 0xe6, 0x30, 0xda, 0xda, 0xd2, 0x76, 0x07,
	0x91, 0xfd, 0x37, 0x2a, 0xfa, 0xbd, 0x57, 0x8a, 0xe0, 0x40, 0x01, 0xe3, 0xbb, 0x07, 0x25, 0xcd,
	0x7a, 0x25, 0xa6, 0x14, 0x7c, 0x84, 0xf9, 0x2b, 0x80, 0xd3, 0x20, 0x70, 0x0c, 0xc3, 0x8b, 0xae,
	0xe7, 0x03, 0x9c, 0x40, 0xbc, 0x95, 0x4d, 0xc3, 0x59, 0x7e, 0x0e, 0xe9, 0xbf, 0x79, 0x62, 0x0a,
	0xc9, 0x4d, 0xdd, 0xd6, 0x96, 0x0f, 0x10, 0x8e, 0xb5, 0x38, 0xcb, 0xbf, 0x43, 0xf6, 0xe8, 0x55,
	0xcc, 0x60, 0xbc, 0x91, 0xaa, 0xaa, 0xd5, 0x4f, 0x3e, 0xc0, 0x27, 0x90, 0x7e, 0x53, 0x56, 0x77,
	0xbb, 0x5f, 0xb2, 0xe2, 0x0c, 0x9f, 0xc1, 0x6c, 0x53, 0x1a, 0x5b, 0x97, 0x4d, 0xd3, 0x5f, 0xd7,
	0x4d, 0x23, 0x2b, 0x1e, 0x39, 0xcf, 0x65, 0xa9, 0x76, 0x92, 0xe0, 0xd0, 0x45, 0x07, 0x29, 0xce,
	0xdf, 0xc1, 0xe4, 0x38, 0x53, 0x57, 0xea, 0x56, 0x2b, 0xe9, 0xeb, 0x39, 0x86, 0x33, 0xd7, 0xe8,
	0x4a, 0x59, 0xd3, 0xf3, 0x28, 0xff, 0x04, 0xd9, 0xa3, 0x35, 0xc1, 0x29, 0x4c, 0x6e, 0xe5, 0x03,
	0xf5, 0xe2, 0x03, 0x9c, 0x41, 0xe6, 0x9f, 0xf0, 0x04, 0x43, 0x0e, 0xd3, 0x8b, 0x72, 0x77, 0xdf,
	0xed, 0xc3, 0x2f, 0xa2, 0x1f, 0x23, 0x5a, 0xcb, 0x8f, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x02,
	0x79, 0x50, 0x15, 0xa5, 0x02, 0x00, 0x00,
}
