// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: market.proto

package model

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MarketBackup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic             string   `protobuf:"bytes,1,opt,name=Topic,proto3" json:"Topic,omitempty"`
	Partition         int32    `protobuf:"varint,2,opt,name=Partition,proto3" json:"Partition,omitempty"`
	Offset            int64    `protobuf:"varint,3,opt,name=Offset,proto3" json:"Offset,omitempty"`
	MarketID          string   `protobuf:"bytes,4,opt,name=MarketID,proto3" json:"MarketID,omitempty"`
	PricePrecision    int32    `protobuf:"varint,5,opt,name=PricePrecision,proto3" json:"PricePrecision,omitempty"`
	VolumePrecision   int32    `protobuf:"varint,6,opt,name=VolumePrecision,proto3" json:"VolumePrecision,omitempty"`
	LowestAsk         uint64   `protobuf:"varint,7,opt,name=LowestAsk,proto3" json:"LowestAsk,omitempty"`
	HighestBid        uint64   `protobuf:"varint,8,opt,name=HighestBid,proto3" json:"HighestBid,omitempty"`
	LowestEntryPrice  uint64   `protobuf:"varint,9,opt,name=LowestEntryPrice,proto3" json:"LowestEntryPrice,omitempty"`
	HighestLossPrice  uint64   `protobuf:"varint,10,opt,name=HighestLossPrice,proto3" json:"HighestLossPrice,omitempty"`
	BuyOrders         []*Order `protobuf:"bytes,11,rep,name=BuyOrders,proto3" json:"BuyOrders,omitempty"`
	SellOrders        []*Order `protobuf:"bytes,12,rep,name=SellOrders,proto3" json:"SellOrders,omitempty"`
	BuyMarketEntries  []*Order `protobuf:"bytes,13,rep,name=BuyMarketEntries,proto3" json:"BuyMarketEntries,omitempty"`
	SellMarketEntries []*Order `protobuf:"bytes,14,rep,name=SellMarketEntries,proto3" json:"SellMarketEntries,omitempty"`
	StopEntryOrders   []*Order `protobuf:"bytes,15,rep,name=StopEntryOrders,proto3" json:"StopEntryOrders,omitempty"`
	StopLossOrders    []*Order `protobuf:"bytes,16,rep,name=StopLossOrders,proto3" json:"StopLossOrders,omitempty"`
	EventSeqID        uint64   `protobuf:"varint,17,opt,name=EventSeqID,proto3" json:"EventSeqID,omitempty"`
	TradeSeqID        uint64   `protobuf:"varint,18,opt,name=TradeSeqID,proto3" json:"TradeSeqID,omitempty"`
}

func (x *MarketBackup) Reset() {
	*x = MarketBackup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketBackup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketBackup) ProtoMessage() {}

func (x *MarketBackup) ProtoReflect() protoreflect.Message {
	mi := &file_market_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketBackup.ProtoReflect.Descriptor instead.
func (*MarketBackup) Descriptor() ([]byte, []int) {
	return file_market_proto_rawDescGZIP(), []int{0}
}

func (x *MarketBackup) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *MarketBackup) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *MarketBackup) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *MarketBackup) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *MarketBackup) GetPricePrecision() int32 {
	if x != nil {
		return x.PricePrecision
	}
	return 0
}

func (x *MarketBackup) GetVolumePrecision() int32 {
	if x != nil {
		return x.VolumePrecision
	}
	return 0
}

func (x *MarketBackup) GetLowestAsk() uint64 {
	if x != nil {
		return x.LowestAsk
	}
	return 0
}

func (x *MarketBackup) GetHighestBid() uint64 {
	if x != nil {
		return x.HighestBid
	}
	return 0
}

func (x *MarketBackup) GetLowestEntryPrice() uint64 {
	if x != nil {
		return x.LowestEntryPrice
	}
	return 0
}

func (x *MarketBackup) GetHighestLossPrice() uint64 {
	if x != nil {
		return x.HighestLossPrice
	}
	return 0
}

func (x *MarketBackup) GetBuyOrders() []*Order {
	if x != nil {
		return x.BuyOrders
	}
	return nil
}

func (x *MarketBackup) GetSellOrders() []*Order {
	if x != nil {
		return x.SellOrders
	}
	return nil
}

func (x *MarketBackup) GetBuyMarketEntries() []*Order {
	if x != nil {
		return x.BuyMarketEntries
	}
	return nil
}

func (x *MarketBackup) GetSellMarketEntries() []*Order {
	if x != nil {
		return x.SellMarketEntries
	}
	return nil
}

func (x *MarketBackup) GetStopEntryOrders() []*Order {
	if x != nil {
		return x.StopEntryOrders
	}
	return nil
}

func (x *MarketBackup) GetStopLossOrders() []*Order {
	if x != nil {
		return x.StopLossOrders
	}
	return nil
}

func (x *MarketBackup) GetEventSeqID() uint64 {
	if x != nil {
		return x.EventSeqID
	}
	return 0
}

func (x *MarketBackup) GetTradeSeqID() uint64 {
	if x != nil {
		return x.TradeSeqID
	}
	return 0
}

var File_market_proto protoreflect.FileDescriptor

var file_market_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xdc, 0x05, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x4c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x41, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x4c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x41, 0x73, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x48,
	0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x4c,
	0x6f, 0x77, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x4c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x48, 0x69, 0x67, 0x68, 0x65,
	0x73, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x42, 0x75, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x09, 0x42, 0x75, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x2c, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x0a, 0x53, 0x65, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a,
	0x10, 0x42, 0x75, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x10, 0x42, 0x75, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x11, 0x53, 0x65, 0x6c, 0x6c, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x11, 0x53, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0f, 0x53, 0x74, 0x6f, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x0e, 0x53,
	0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x0e, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x49, 0x44, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x71, 0x49, 0x44, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x71, 0x49,
	0x44, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x35, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2d, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_market_proto_rawDescOnce sync.Once
	file_market_proto_rawDescData = file_market_proto_rawDesc
)

func file_market_proto_rawDescGZIP() []byte {
	file_market_proto_rawDescOnce.Do(func() {
		file_market_proto_rawDescData = protoimpl.X.CompressGZIP(file_market_proto_rawDescData)
	})
	return file_market_proto_rawDescData
}

var file_market_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_market_proto_goTypes = []interface{}{
	(*MarketBackup)(nil), // 0: model.MarketBackup
	(*Order)(nil),        // 1: model.Order
}
var file_market_proto_depIdxs = []int32{
	1, // 0: model.MarketBackup.BuyOrders:type_name -> model.Order
	1, // 1: model.MarketBackup.SellOrders:type_name -> model.Order
	1, // 2: model.MarketBackup.BuyMarketEntries:type_name -> model.Order
	1, // 3: model.MarketBackup.SellMarketEntries:type_name -> model.Order
	1, // 4: model.MarketBackup.StopEntryOrders:type_name -> model.Order
	1, // 5: model.MarketBackup.StopLossOrders:type_name -> model.Order
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_market_proto_init() }
func file_market_proto_init() {
	if File_market_proto != nil {
		return
	}
	file_order_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_market_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketBackup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_market_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_market_proto_goTypes,
		DependencyIndexes: file_market_proto_depIdxs,
		MessageInfos:      file_market_proto_msgTypes,
	}.Build()
	File_market_proto = out.File
	file_market_proto_rawDesc = nil
	file_market_proto_goTypes = nil
	file_market_proto_depIdxs = nil
}
